{"version":3,"sources":["components/homeComponents/signInButton.js","components/homeComponents/navBar.js","components/homeComponents/underLine.js","components/homeComponents/bodyText.js","components/home.js","components/play.js","components/thankYou.js","components/limitExceeded.js","components/errorNotFound.js","App.js","serviceWorker.js","redux/reducer.js","redux/store.js","index.js"],"names":["SignInButton","props","className","NavBar","to","href","UnderLine","BodyText","Home","Play","ThankYou","LimitExceeded","ErrorNotFound","App","document","body","classList","add","path","component","exact","Boolean","window","location","hostname","match","initialStates","firstName","lastName","userName","email","picture","userStateReducer","state","action","type","Object","assign","payload","store","createStore","client","ApolloClient","uri","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sQAYeA,EATM,SAACC,GAClB,OACI,yBAAKC,UAAW,gBACZ,kBAAC,IAAD,CAAUA,UAAU,sBACpB,uBAAGA,UAAW,qBAAd,aCWGC,EAbA,SAACF,GACZ,OACI,yBAAKC,UAAW,UACZ,kBAAC,IAAD,CAAME,GAAI,IAAKF,UAAW,eACtB,yCAEJ,uBAAGG,KAAM,mDAAoDH,UAAW,KACpE,kBAAC,EAAD,SCDDI,EARG,SAACL,GACf,OACI,yBAAKC,UAAW,eCWTK,EAbE,SAACN,GACd,OACI,yBAAKC,UAAW,YACZ,yBAAKA,UAAW,qBACZ,wBAAIA,UAAW,wBAAf,UACA,wBAAIA,UAAW,sBAAf,SAEJ,kBAAC,EAAD,MACA,wBAAIA,UAAW,mBAAf,yBCYGM,EAdF,SAACP,GACV,OACI,yBAAKC,UAAW,QACZ,kBAAC,EAAD,CAAQA,UAAW,gBACnB,kBAAC,EAAD,CAAUA,UAAW,kBACrB,yBAAKA,UAAW,0BACZ,uBAAGG,KAAM,mDAAoDH,UAAW,KACpE,kBAAC,EAAD,UCLLO,EARF,SAACR,GACV,OACI,yBAAKC,UAAW,UCMTQ,EARE,SAACT,GACd,OACI,yBAAKC,UAAW,cCMTS,EARO,SAACV,GACnB,OACI,yBAAKC,UAAW,mBCMTU,EARO,SAACX,GACnB,OACI,yBAAKC,UAAW,mBC0BTW,EAjBH,WAEV,OALAC,SAASC,KAAKC,UAAUC,IAAI,QAM1B,yBAAKf,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOgB,KAAK,IAAIC,UAAWX,EAAMY,OAAK,IACtC,kBAAC,IAAD,CAAOF,KAAK,aAAaC,UAAWV,EAAMW,OAAK,IAC/C,kBAAC,IAAD,CAAOF,KAAM,YAAaC,UAAWT,EAAUU,OAAK,IACpD,kBAAC,IAAD,CAAOF,KAAM,iBAAkBC,UAAWR,EAAeS,OAAK,IAC9D,kBAAC,IAAD,CAAOD,UAAWP,QCZRS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oCChBAC,EAAgB,CAClBC,UAAY,GACZC,SAAW,GACXC,SAAW,GACXC,MAAQ,GACRC,QAAU,IAeCC,EAPU,WAAoC,IAAnCC,EAAkC,uDAA1BP,EAAeQ,EAAW,uCACxD,GANa,aAMTA,EAAOC,KACP,OAAQC,OAAOC,OAAO,GAAIJ,EAAOC,EAAOI,UCXjCC,EAFDC,YAAYR,GCUpBS,EAAS,IAAIC,IAAa,CAC9BC,IALc,8BAShBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUP,MAAOA,GACb,kBAAC,IAAD,CAAgBE,OAAQA,GACpB,kBAAC,EAAD,SAIV3B,SAASiC,eAAe,SHwGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c8a0b3a2.chunk.js","sourcesContent":["import React from 'react';\nimport {FaGoogle} from 'react-icons/fa';\n\nconst SignInButton = (props) => {\n    return(\n        <div className={'signInButton'}>\n            <FaGoogle className='signInButton-logo' />\n            <p className={'signInButton-text'}>Sign In</p>\n        </div>\n    );\n};\n\nexport default SignInButton;","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport './home.css';\nimport SignInButtonSmall from \"./signInButton\";\n\nconst NavBar = (props) => {\n    return(\n        <div className={'navBar'}>\n            <Link to={'/'} className={'navBar-logo'}>\n                <span>Salvos</span>\n            </Link>\n            <a href={'https://quizapp-server.herokuapp.com/auth/google'} className={'a'}>\n                <SignInButtonSmall />\n            </a>\n        </div>\n    );\n};\n\nexport default NavBar;","import React from 'react';\n\n\nconst UnderLine = (props) => {\n    return(\n        <div className={'underLine'}>\n\n        </div>\n    );\n};\n\nexport default UnderLine;","import React from 'react';\nimport UnderLine from './underLine';\n\nconst BodyText = (props) => {\n    return(\n        <div className={'bodyText'}>\n            <div className={'bodyText-div-head'}>\n                <h2 className={'bodyText-head-online'}>Online</h2>\n                <h2 className={'bodyText-head-quiz'}>Quiz</h2>\n            </div>\n            <UnderLine />\n            <h4 className={'bodyText-byLine'}>Some text goes here</h4>\n        </div>\n    );\n};\n\nexport default BodyText;","import React from 'react';\nimport './homeComponents/home.css';\nimport NavBar from './homeComponents/navBar';\nimport BodyText from './homeComponents/bodyText';\n//import Credits from './homeComponents/credits';\nimport SignInButton from './homeComponents/signInButton';\n\n//TODO: add credits\n\nconst Home = (props) => {\n    return(\n        <div className={'home'}>\n            <NavBar className={'home-navBar'}/>\n            <BodyText className={'home-bodyText'}/>\n            <div className={'home-signInButtonLarge'}>\n                <a href={'https://quizapp-server.herokuapp.com/auth/google'} className={'a'}>\n                    <SignInButton/>\n                </a>\n            </div>\n        </div>\n    );\n};\n\nexport default Home;","import React from 'react';\n\n\nconst Play = (props) => {\n    return(\n        <div className={'play'}>\n\n        </div>\n    );\n};\n\nexport default Play;","import React from 'react';\n\n\nconst ThankYou = (props) => {\n    return(\n        <div className={'thankYou'}>\n\n        </div>\n    );\n};\n\nexport default ThankYou;","import React from 'react';\n\n\nconst LimitExceeded = (props) => {\n    return(\n        <div className={'limitExceeded'}>\n\n        </div>\n    );\n};\n\nexport default LimitExceeded;","import React from 'react';\n\n\nconst ErrorNotFound = (props) => {\n    return(\n        <div className={'errorNotFound'}>\n\n        </div>\n    );\n};\n\nexport default ErrorNotFound;","import React from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport './App.css';\nimport Home from './components/home';\nimport Play from './components/play';\nimport ThankYou from './components/thankYou';\nimport LimitExceeded from './components/limitExceeded';\nimport ErrorNotFound from './components/errorNotFound';\n\n\nconst setBodyStyles = () => {\n  document.body.classList.add('body');\n};\n\nconst App = () => {\n  setBodyStyles();\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Switch>\n          <Route path='/' component={Home} exact />\n          <Route path='/quiz/play' component={Play} exact />\n          <Route path={'/thankyou'} component={ThankYou} exact />\n          <Route path={'/limitexceeded'} component={LimitExceeded} exact />\n          <Route component={ErrorNotFound} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//reducer\n\nconst initialStates = {\n    firstName : '',\n    lastName : '',\n    userName : '',\n    email : '',\n    picture : ''\n};\n\nconst ADD_USER = 'ADD_USER';\n\n//reducer initial_states are immutable by principle.\n//As a consequence we use 'Object.assign' for returning a new object taking properties from multiple sources rather than modifying the immutable one.\n\nconst userStateReducer = (state = initialStates, action) => {\n    if (action.type === ADD_USER)  {\n        return (Object.assign({}, state, action.payload));\n    }\n};\n\n\nexport default userStateReducer;","import {createStore} from 'redux';\nimport userStateReducer from './reducer';\n\n\nconst store = createStore(userStateReducer);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {ApolloProvider} from 'react-apollo';\nimport ApolloClient from 'apollo-boost';\nimport store from './redux/store';\n\n//TODO: do change this during production\nconst API_DEV = 'http://localhost:4001/api';\nconst API_PROD = 'https://quizapp-server.herokuapp.com/api';\n\n//apollo setup\nconst client = new ApolloClient({\n  uri : API_DEV\n});\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <ApolloProvider client={client}>\n            <App />\n        </ApolloProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}