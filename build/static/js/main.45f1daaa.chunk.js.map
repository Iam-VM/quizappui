{"version":3,"sources":["components/homeComponents/signInButton.js","components/homeComponents/navBar.js","components/homeComponents/underLine.js","components/homeComponents/bodyText.js","components/home.js","components/playComponents/question.js","components/playComponents/optionInstant.js","components/playComponents/questionCount.js","components/playComponents/timeOut.js","components/playComponents/gameRenderer.js","queries.js","components/play.js","components/playComponents/gameScreen.js","components/playComponents/result.js","components/playComponents/dynamicGameArea.js","components/thankYou.js","components/limitExceeded.js","components/errorNotFound.js","App.js","serviceWorker.js","index.js"],"names":["SignInButton","props","className","NavBar","to","href","UnderLine","BodyText","Home","Question","question","OptionInstant","onClick","console","log","checkAnswer","optionText","QuestionCount","questionNumber","totalQuestions","TimeOut","useState","timer","setTimer","useEffect","GameRenderer","isTimeOut","setIsTimeOut","setTimeout","stateData","questions","length","questionText","options","map","option","GET_QUERY","gql","ADD_RESPONSE","GameScreen","useMutation","triggerMutation","data","progress","setProgress","setQuestionNumber","setQuestionText","setOptions","optionsArray","optionOne","optionTwo","optionThree","optionFour","showResults","addResponse","response","variables","ID","Cookies","get","then","responses","push","catch","err","Result","DynamicGameArea","startClicked","setStartClicked","showResultState","setShowResultState","Play","useQuery","loading","error","user","firstName","ThankYou","LimitExceeded","ErrorNotFound","App","document","body","classList","add","path","component","exact","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.45f1daaa.chunk.js","sourcesContent":["import React from 'react';\nimport {FaGoogle} from 'react-icons/fa';\n\nconst SignInButton = (props) => {\n    return(\n        <div className={'button'}>\n            <FaGoogle className='button-logo' />\n            <p className={'button-text'}>Sign In</p>\n        </div>\n    );\n};\n\nexport default SignInButton;","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport './home.css';\nimport SignInButtonSmall from \"./signInButton\";\n\nconst NavBar = (props) => {\n    return(\n        <div className={'navBar'}>\n            <Link to={'/'} className={'navBar-logo'}>\n                <span>Salvos</span>\n            </Link>\n            <a href={'https://quizapp-server.herokuapp.com/auth/google'} className={'a'}>\n                <SignInButtonSmall />\n            </a>\n        </div>\n    );\n};\n\nexport default NavBar;","import React from 'react';\n\n\nconst UnderLine = (props) => {\n    return(\n        <div className={'underLine'}>\n        </div>\n    );\n};\n\nexport default UnderLine;","import React from 'react';\nimport UnderLine from './underLine';\n\nconst BodyText = (props) => {\n    return(\n        <div className={'bodyText'}>\n            <div className={'bodyText-div-head'}>\n                <h2 className={'bodyText-head-online'}>Online</h2>\n                <h2 className={'bodyText-head-quiz'}>Quiz</h2>\n            </div>\n            <UnderLine />\n            <h4 className={'bodyText-byLine'}>Some text goes here</h4>\n        </div>\n    );\n};\n\nexport default BodyText;","import React from 'react';\nimport './homeComponents/home.css';\nimport NavBar from './homeComponents/navBar';\nimport BodyText from './homeComponents/bodyText';\n//import Credits from './homeComponents/credits';\nimport SignInButton from './homeComponents/signInButton';\n\n//TODO: add credits\n\nconst Home = (props) => {\n    return(\n        <div className={'home'}>\n            <NavBar className={'home-navBar'}/>\n            <BodyText className={'home-bodyText'}/>\n            <div className={'home-signInButtonLarge'}>\n                <a href={'https://quizapp-server.herokuapp.com/auth/google'} className={'a'}>\n                    <SignInButton/>\n                </a>\n            </div>\n        </div>\n    );\n};\n\nexport default Home;","import React from 'react';\nimport './playQuestion.css';\n\nconst Question = (props) => {\n\treturn (\n        <p className={'question'}>{props.question}</p>\n    );\n};\n\nexport default Question;\n","import React, {useEffect, useState} from 'react';\nimport './playQuestion.css';\n\nconst OptionInstant = (props) => {\n\n\treturn (\n        <li className={'optionInstant'}>\n            <button className={'optionButton'} onClick={() => {\n                console.log('button clicked...');\n                props.checkAnswer(props.optionText);\n            }}>\n                {props.optionText}\n            </button>\n        </li>\n    );\n};\n\nexport default OptionInstant;\n","import React from 'react';\nimport './playQuestion.css';\n\n//TODO: need questionNumber and totalQuestions\n\nconst QuestionCount = (props) => {\n\treturn (\n        <div className={'counterContainer'}>\n            <span className={'questionCounter'}>{props.questionNumber}/{props.totalQuestions}</span>\n            <div className={'counterUnderLine'}></div>\n        </div>\n    );\n};\n\nexport default QuestionCount;\n","import React, {useState, useEffect} from 'react';\n\nconst TimeOut = (props) => {\n    const [timer, setTimer] = useState(3);\n    useEffect(() => {\n        if (timer > 0){\n            setTimer(timer-1);\n            if (timer === 0){\n                props.checkAnswer('');\n            }\n        }\n    }, [timer]);\n\n    return (\n        <div className={'timeOut'}>\n            <h2 className={'timeOutHead'}>TimeOut!!</h2>\n            <div className={'timeOut-underline'}></div>\n            <p>Next question in {timer}</p>\n        </div>\n    );\n};\n\nexport default TimeOut;\n","import React,{useState, useEffect} from 'react';\nimport Question from \"./question\";\nimport OptionInstant from \"./optionInstant\";\nimport QuestionCount from \"./questionCount\";\nimport TimeOut from \"./timeOut\";\nimport './playQuestion.css';\n\n//props: questionText(string), options(list of options), stateData.\n\n\nconst GameRenderer = (props) => {\n    const [questionNumber, setQuestionNumber] = useState(props.questionNumber);\n    const [timer, setTimer] = useState(20);\n    const [isTimeOut, setIsTimeOut] = useState(false);\n\n    useEffect(() => {\n        if (timer === 0){\n            setIsTimeOut(true);\n        }\n        setTimeout(() => {\n            if (timer > 0){\n                setTimer(timer - 1);\n            }\n        }, 1000);\n    }, [timer]);\n\n    const checkAnswer = (optionText) => {\n        props.checkAnswer(optionText);\n        setTimer(20);\n    };\n\n\n    if (isTimeOut){\n        return <TimeOut checkAnswer={checkAnswer}/>;\n    }\n    else {\n        return(\n            <div className={'gameRenderer'}>\n                <div className={'questionHead'}>\n                    <div className={'questionSubHead'}>\n                        <span className={'questionHeadText'}>Question: </span>\n                        <QuestionCount questionNumber={props.questionNumber} totalQuestions={props.stateData.questions.length}/>\n                    </div>\n                    <div className={'timerContainer'}>\n                        <span className={'timerHead'}>Timer</span>\n                        <div className={'timer'}>{timer}</div>\n                        <div className={'timerUnderLine'}></div>\n                    </div>\n                </div>\n                <Question question={props.questionText} />\n                <div className={'optionsContainer'}>\n                    <ul className={'options'}>\n                        {props.options.map((option) => <OptionInstant  checkAnswer={checkAnswer} optionText={option} />)}\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n\n};\n\nexport default GameRenderer;\n","import gql from 'graphql-tag';\n\nexport const GET_QUERY = gql`\n    query ($ID : String!)\n    {\n        user(ID : $ID)\n        {\n            userName,\n            firstName,\n            lastName,\n            picture,\n            email,\n            progress,\n            responses\n        },\n        questions\n        {\n            questionID,\n            question,\n            optionOne,\n            optionTwo,\n            optionThree,\n            optionFour,\n            correctOption\n        }\n    }\n`;\n\nexport const ADD_RESPONSE = gql`\n    mutation AddResponse($ID: String!, $progress: Int!, $response : String!) {\n        addResponse(ID: $ID, progress: $progress, response: $response) {\n            progress\n        }\n    }\n`;","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport './playComponents/playStart.css';\nimport DynamicGameArea from './playComponents/dynamicGameArea';\nimport { useQuery } from '@apollo/react-hooks';\nimport Cookies from 'js-cookie';\nimport {GET_QUERY} from \"../queries\";\n\n\nlet stateData;\n\nconst Play = (props) => {\n    const ID = Cookies.get('user_id');\n    const {loading, error, data} = useQuery(GET_QUERY, {\n        variables : {ID}\n    });\n    if (error) {\n        return  (<p>{`Error occured: ${error}`}</p>);\n    }\n    if (loading) {\n        return  (<p>loading...</p>);\n    }\n    stateData = {...data.user};\n    stateData.questions = data.questions;\n    if (stateData.responses === null) stateData.responses = [];\n    return(\n        <div className={'play'}>\n            <div className={'navBar'}>\n                <Link to={'/'} className={'navBar-logo'}>\n                    <span>Salvos</span>\n                </Link>\n                <span className={'helloName'}>\n                    {`Hello, ${stateData.firstName || `...`}`}\n                </span>\n            </div>\n            <DynamicGameArea className={'dynamicGameArea'} stateData={stateData} />\n        </div>\n    );\n};\n\nexport default Play;","import React, {useState, useEffect} from 'react';\nimport GameRenderer from \"./gameRenderer\";\nimport {ADD_RESPONSE} from \"../../queries\";\nimport {useMutation} from \"@apollo/react-hooks\";\nimport Cookies from 'js-cookie';\nimport './playQuestion.css';\n\n//add response array and showResults func in parent\n\nconst GameScreen = (props) => {\n    const [triggerMutation, { data }] = useMutation(ADD_RESPONSE);\n    const [progress, setProgress] = useState(props.progress); //changed count to progress\n    const [questionNumber, setQuestionNumber] = useState(null);\n    const [questionText, setQuestionText] = useState('');\n    const [options, setOptions] = useState([]);\n\n    useEffect(() => {\n        console.log(progress);\n        if (progress < props.stateData.questions.length) {\n            console.log('inside if - useEffect' + progress);\n            setQuestionText(props.stateData.questions[progress].question);\n            const optionsArray = [props.stateData.questions[progress].optionOne,\n                props.stateData.questions[progress].optionTwo,\n                props.stateData.questions[progress].optionThree,\n                props.stateData.questions[progress].optionFour];\n            setOptions(optionsArray);\n            setQuestionNumber(progress + 1);\n        }\n        if (progress === props.stateData.questions.length) {\n            console.log('showResults called...' + progress);\n            props.showResults();\n        }\n    }, [progress]);\n\n    const triggerNextQuestion = () => {\n        setProgress(progress + 1);\n        console.log('triggerNxtquest called new' + progress);\n    };\n\n    const addResponse = (response) => {\n        console.log('mutation' + progress);\n        triggerMutation({\n            variables : {ID : Cookies.get('user_id'),\n            progress : questionNumber,\n            response : response}\n        }).then(() => {\n            console.log('mutation success' + progress);\n            props.responses.push(response);\n            setTimeout(() => triggerNextQuestion(), 500);\n        }).catch((err) => {console.log(err)});\n    };\n\n\n\n    const checkAnswer = (optionText) => {\n        if (progress < props.stateData.questions.length){\n            console.log('reached here (1) ' + progress);\n            addResponse(optionText);\n        }\n    };\n\n    return (\n        <div className={'gameScreen'}>\n            <GameRenderer questionText={questionText}\n                          stateData={props.stateData}\n                          questionNumber={questionNumber}\n                          options={options}\n                          checkAnswer={checkAnswer}\n                          totalQuestions={props.stateData.questions.length} />\n        </div>\n    );\n};\n\nexport default GameScreen;","import React from 'react';\nimport './playQuestion.css';\n\n\nconst Result = () => {\n    return(\n        <div className={'result'}>\n            <p>This is the result</p>\n        </div>\n    );\n};\n\nexport default Result;","import React, {useEffect, useState} from 'react';\nimport {Redirect}  from 'react-router-dom';\nimport GameScreen from './gameScreen';\nimport './playStart.css';\nimport '../homeComponents/home.css';\nimport './playQuestion.css';\nimport Result from \"./result\";\n\nconst DynamicGameArea = (props) => {\n\n    const [startClicked, setStartClicked] = useState(false);\n    const [showResultState, setShowResultState] = useState(false);\n    const responses = props.stateData.responses;\n\n\n    const showResults = () => {\n        setShowResultState(true);\n    };\n    if (props.stateData.progress === props.stateData.questions.length){\n        return <Redirect to={'/limitexceeded'} />;\n    }\n\n    if (!startClicked){\n        return (\n            <div className={'gameArea'}>\n                <p className={'start-text'}>You are ready to go</p>\n                <div className={'start-underLine'}></div>\n                <div className={'button start-button'} onClick={() => setStartClicked(true)}>Start Game</div>\n            </div>\n       );\n    }\n    if (showResultState) {\n        return <Result response={responses} />\n    }\n    return <GameScreen stateData = {props.stateData} responses={responses} showResults={showResults} progress={props.stateData.progress} />;\n};\n\n\nexport default DynamicGameArea;\n","import React from 'react';\n\n\nconst ThankYou = (props) => {\n    return(\n        <div className={'thankYou'}>\n\n        </div>\n    );\n};\n\nexport default ThankYou;","import React from 'react';\n\n\nconst LimitExceeded = (props) => {\n    return(\n        <div className={'limitExceeded'}>\n            <h2 className={'limitExceededHead'}>Quiz Completed!</h2>\n            <h3 className={'limitExceededSubHead'}>You really did it like a Ninja!</h3>\n        </div>\n    );\n};\n\nexport default LimitExceeded;","import React from 'react';\n\n\nconst ErrorNotFound = (props) => {\n    return(\n        <div className={'errorNotFound'}>\n\n        </div>\n    );\n};\n\nexport default ErrorNotFound;","import React from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport './App.css';\nimport Home from './components/home';\nimport Play from './components/play';\nimport ThankYou from './components/thankYou';\nimport LimitExceeded from './components/limitExceeded';\nimport ErrorNotFound from './components/errorNotFound';\n\n\nconst setBodyStyles = () => {\n  document.body.classList.add('body');\n};\n\nconst App = () => {\n  setBodyStyles();\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Switch>\n          <Route path='/' component={Home} exact />\n          <Route path='/quiz/play' component={Play} exact />\n          <Route path={'/thankyou'} component={ThankYou} exact />\n          <Route path={'/limitexceeded'} component={LimitExceeded} exact />\n          <Route component={ErrorNotFound} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {ApolloProvider} from 'react-apollo';\nimport ApolloClient from 'apollo-boost';\n\n//TODO: do change this during production\nconst API_DEV = 'http://localhost:4001/iamvmgraphqlapi';\nconst API_PROD = 'https://quizapp-server.herokuapp.com/iamvmgraphqlapi';\n\n//apollo setup\nconst client = new ApolloClient({\n  uri : API_PROD\n});\n\n\nReactDOM.render(\n  <React.StrictMode>\n        <ApolloProvider client={client}>\n            <App />\n        </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}