{"ast":null,"code":"var _jsxFileName = \"/home/vm/Desktop/quizApp/quizappui/src/components/playComponents/gameScreen.js\";\nimport React, { useState, useEffect } from 'react';\nimport GameRenderer from \"./gameRenderer\";\nimport { ADD_RESPONSE } from \"../../queries\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport Cookies from 'js-cookie'; //add response array and showResults func in parent\n\nconst GameScreen = props => {\n  const [triggerMutation, {\n    data\n  }] = useMutation(ADD_RESPONSE);\n  const [counter, setCounter] = useState(props.progress);\n  const [questionNumber, setQuestionNumber] = useState(props.progress + 1);\n  const [questionText, setQuestionText] = useState('');\n  const [options, setOptions] = useState([]);\n  useEffect(() => {\n    setQuestionText(props.stateData.questions[counter].question);\n    const optionsArray = [props.stateData.questions[counter].optionOne, props.stateData.questions[counter].optionTwo, props.stateData.questions[counter].optionThree, props.stateData.questions[counter].optionFour];\n    setOptions(optionsArray);\n  }, []);\n\n  const triggerNextQuestion = () => {\n    setCounter(counter + 1);\n    setQuestionNumber(questionNumber + 1);\n    setQuestionText(props.stateData.questions[counter].question);\n    const optionsArray = [props.stateData.questions[counter].optionOne, props.stateData.questions[counter].optionTwo, props.stateData.questions[counter].optionThree, props.stateData.questions[counter].optionFour];\n    setOptions(optionsArray);\n  };\n\n  const addResponse = response => {\n    triggerMutation({\n      variables: {\n        ID: Cookies.get('user_id'),\n        progress: questionNumber,\n        response: response\n      }\n    });\n  };\n\n  const checkAnswer = optionText => {\n    addResponse(optionText);\n    props.responses.push(optionText);\n\n    if (questionNumber < props.stateData.questions.length) {\n      setTimeout(() => triggerNextQuestion(), 500);\n    } else {\n      setTimeout(() => props.showResults(), 500);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: 'gameScreen',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GameRenderer, {\n    questionText: questionText,\n    stateData: props.stateData,\n    questionNumber: questionNumber,\n    options: options,\n    checkAnswer: checkAnswer,\n    totalQuestions: props.stateData.questions.length,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default GameScreen;","map":{"version":3,"sources":["/home/vm/Desktop/quizApp/quizappui/src/components/playComponents/gameScreen.js"],"names":["React","useState","useEffect","GameRenderer","ADD_RESPONSE","useMutation","Cookies","GameScreen","props","triggerMutation","data","counter","setCounter","progress","questionNumber","setQuestionNumber","questionText","setQuestionText","options","setOptions","stateData","questions","question","optionsArray","optionOne","optionTwo","optionThree","optionFour","triggerNextQuestion","addResponse","response","variables","ID","get","checkAnswer","optionText","responses","push","length","setTimeout","showResults"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport GameRenderer from \"./gameRenderer\";\nimport {ADD_RESPONSE} from \"../../queries\";\nimport {useMutation} from \"@apollo/react-hooks\";\nimport Cookies from 'js-cookie';\n\n//add response array and showResults func in parent\n\nconst GameScreen = (props) => {\n    const [triggerMutation, { data }] = useMutation(ADD_RESPONSE);\n    const [counter, setCounter] = useState(props.progress);\n    const [questionNumber, setQuestionNumber] = useState(props.progress + 1);\n    const [questionText, setQuestionText] = useState('');\n    const [options, setOptions] = useState([]);\n\n    useEffect(() => {\n        setQuestionText(props.stateData.questions[counter].question);\n        const optionsArray = [props.stateData.questions[counter].optionOne,\n            props.stateData.questions[counter].optionTwo,\n            props.stateData.questions[counter].optionThree,\n            props.stateData.questions[counter].optionFour];\n        setOptions(optionsArray);\n    }, []);\n\n    const triggerNextQuestion = () => {\n        setCounter(counter + 1);\n        setQuestionNumber(questionNumber + 1);\n        setQuestionText(props.stateData.questions[counter].question);\n        const optionsArray = [props.stateData.questions[counter].optionOne,\n            props.stateData.questions[counter].optionTwo,\n            props.stateData.questions[counter].optionThree,\n            props.stateData.questions[counter].optionFour];\n        setOptions(optionsArray);\n    };\n\n    const addResponse = (response) => {\n        triggerMutation({\n            variables : {ID : Cookies.get('user_id'),\n            progress : questionNumber,\n            response : response}\n        });\n    };\n\n\n\n    const checkAnswer = (optionText) => {\n        addResponse(optionText);\n        props.responses.push(optionText);\n        if (questionNumber < props.stateData.questions.length){\n            setTimeout(() => triggerNextQuestion(), 500);\n        }\n        else {\n            setTimeout(() => props.showResults(), 500);\n        }\n    };\n\n    return (\n        <div className={'gameScreen'}>\n            <GameRenderer questionText={questionText}\n                          stateData={props.stateData}\n                          questionNumber={questionNumber}\n                          options={options}\n                          checkAnswer={checkAnswer}\n                          totalQuestions={props.stateData.questions.length} />\n        </div>\n    );\n};\n\nexport default GameScreen;"]},"metadata":{},"sourceType":"module"}