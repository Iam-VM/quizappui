{"ast":null,"code":"//reducer\nimport { combineReducers } from 'redux';\nconst initialUserState = {\n  firstName: '',\n  lastName: '',\n  userName: '',\n  email: '',\n  picture: ''\n};\nconst initialQuestionState = {};\nconst ADD_USER = 'ADD_USER';\nconst ADD_QUESTION = 'ADD_QUESTION'; //reducer initial_states are immutable by principle.\n//As a consequence we use 'Object.assign' for returning a new object taking properties from multiple sources rather than modifying the immutable one.\n\nconst userStateReducer = (state = initialUserState, action) => {\n  if (action.type === ADD_USER) {\n    return Object.assign({}, state, action.payload);\n  }\n};\n\nconst questionStateReducer = (state = initialQuestionState, action) => {\n  if (action.type === ADD_QUESTION) {\n    return action.payload;\n  }\n};\n\nexport default combineReducers({\n  userStateReducer,\n  questionStateReducer\n});","map":{"version":3,"sources":["/home/vm/Desktop/quizApp/quizappui/src/redux/reducer.js"],"names":["combineReducers","initialUserState","firstName","lastName","userName","email","picture","initialQuestionState","ADD_USER","ADD_QUESTION","userStateReducer","state","action","type","Object","assign","payload","questionStateReducer"],"mappings":"AAAA;AACA,SAAQA,eAAR,QAA8B,OAA9B;AAGA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,SAAS,EAAG,EADS;AAErBC,EAAAA,QAAQ,EAAG,EAFU;AAGrBC,EAAAA,QAAQ,EAAG,EAHU;AAIrBC,EAAAA,KAAK,EAAG,EAJa;AAKrBC,EAAAA,OAAO,EAAG;AALW,CAAzB;AAQA,MAAMC,oBAAoB,GAAG,EAA7B;AAGA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,YAAY,GAAG,cAArB,C,CAEA;AACA;;AAEA,MAAMC,gBAAgB,GAAG,CAACC,KAAK,GAAGV,gBAAT,EAA2BW,MAA3B,KAAsC;AAC3D,MAAIA,MAAM,CAACC,IAAP,KAAgBL,QAApB,EAA+B;AAC3B,WAAQM,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyBC,MAAM,CAACI,OAAhC,CAAR;AACH;AACJ,CAJD;;AAMA,MAAMC,oBAAoB,GAAG,CAACN,KAAK,GAAGJ,oBAAT,EAA+BK,MAA/B,KAA0C;AACnE,MAAIA,MAAM,CAACC,IAAP,KAAgBJ,YAApB,EAAkC;AAC9B,WAAQG,MAAM,CAACI,OAAf;AACH;AACJ,CAJD;;AAMA,eAAehB,eAAe,CAAC;AAACU,EAAAA,gBAAD;AAAmBO,EAAAA;AAAnB,CAAD,CAA9B","sourcesContent":["//reducer\nimport {combineReducers} from 'redux';\n\n\nconst initialUserState = {\n    firstName : '',\n    lastName : '',\n    userName : '',\n    email : '',\n    picture : ''\n};\n\nconst initialQuestionState = {};\n\n\nconst ADD_USER = 'ADD_USER';\nconst ADD_QUESTION = 'ADD_QUESTION';\n\n//reducer initial_states are immutable by principle.\n//As a consequence we use 'Object.assign' for returning a new object taking properties from multiple sources rather than modifying the immutable one.\n\nconst userStateReducer = (state = initialUserState, action) => {\n    if (action.type === ADD_USER)  {\n        return (Object.assign({}, state, action.payload));\n    }\n};\n\nconst questionStateReducer = (state = initialQuestionState, action) => {\n    if (action.type === ADD_QUESTION) {\n        return (action.payload);\n    }\n}\n\nexport default combineReducers({userStateReducer, questionStateReducer}) ;"]},"metadata":{},"sourceType":"module"}