{"ast":null,"code":"import _slicedToArray from\"/home/vm/Desktop/quizApp/quizappui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import GameRenderer from\"./gameRenderer\";import{ADD_RESPONSE}from\"../../queries\";import{useMutation}from\"@apollo/react-hooks\";import Cookies from'js-cookie';import'./playQuestion.css';import QuestionCount from\"./questionCount\";//add response array and showResults func in parent\nvar GameScreen=function GameScreen(props){var _useMutation=useMutation(ADD_RESPONSE),_useMutation2=_slicedToArray(_useMutation,2),triggerMutation=_useMutation2[0],data=_useMutation2[1].data;var _useState=useState(props.progress),_useState2=_slicedToArray(_useState,2),progress=_useState2[0],setProgress=_useState2[1];//changed count to progress\nvar _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),questionNumber=_useState4[0],setQuestionNumber=_useState4[1];var _ref=\"\",_ref2=_slicedToArray(_ref,2),haveImage=_ref2[0],setHaveImage=_ref2[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),questionText=_useState6[0],setQuestionText=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),options=_useState8[0],setOptions=_useState8[1];useEffect(function(){if(progress<props.stateData.questions.length){setQuestionText(props.stateData.questions[progress].question);setHaveImage(props.stateData.questions[progress].haveImage);var optionsArray=[props.stateData.questions[progress].optionOne,props.stateData.questions[progress].optionTwo,props.stateData.questions[progress].optionThree,props.stateData.questions[progress].optionFour];setOptions(optionsArray);setQuestionNumber(progress+1);}if(progress===props.stateData.questions.length){props.showResults();}},[progress]);var triggerNextQuestion=function triggerNextQuestion(){setProgress(progress+1);};var addResponse=function addResponse(response,point){triggerMutation({variables:{ID:Cookies.get('user_id'),progress:questionNumber,response:response,points:point}});};var checkAnswer=function checkAnswer(optionText,ratio){if(progress<props.stateData.questions.length){if(ratio!==null){if(optionText===props.stateData.questions[progress].correctOption){var point=Math.round(ratio*100);addResponse(optionText,props.points+point);props.setPoints(props.points+point);setTimeout(function(){return triggerNextQuestion();},500);}else{addResponse(optionText,props.points);setTimeout(function(){return triggerNextQuestion();},500);}}else{addResponse(optionText,props.points);setTimeout(function(){return triggerNextQuestion();},500);}}};return/*#__PURE__*/React.createElement(\"div\",{className:'gameScreen'},/*#__PURE__*/React.createElement(GameRenderer,{questionText:questionText,stateData:props.stateData,questionNumber:questionNumber,haveImage:haveImage,options:options,progress:progress,checkAnswer:checkAnswer,totalQuestions:props.stateData.questions.length}));};export default GameScreen;","map":{"version":3,"sources":["/home/vm/Desktop/quizApp/quizappui/src/components/playComponents/gameScreen.js"],"names":["React","useState","useEffect","GameRenderer","ADD_RESPONSE","useMutation","Cookies","QuestionCount","GameScreen","props","triggerMutation","data","progress","setProgress","questionNumber","setQuestionNumber","haveImage","setHaveImage","questionText","setQuestionText","options","setOptions","stateData","questions","length","question","optionsArray","optionOne","optionTwo","optionThree","optionFour","showResults","triggerNextQuestion","addResponse","response","point","variables","ID","get","points","checkAnswer","optionText","ratio","correctOption","Math","round","setPoints","setTimeout"],"mappings":"yJAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,CAAyBC,SAAzB,KAAyC,OAAzC,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CACA,OAAQC,YAAR,KAA2B,eAA3B,CACA,OAAQC,WAAR,KAA0B,qBAA1B,CACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CACA,MAAO,oBAAP,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CAEA;AAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,CAAW,kBACUJ,WAAW,CAACD,YAAD,CADrB,8CACnBM,eADmB,kBACAC,IADA,kBACAA,IADA,eAEMV,QAAQ,CAACQ,KAAK,CAACG,QAAP,CAFd,wCAEnBA,QAFmB,eAETC,WAFS,eAEgC;AAFhC,eAGkBZ,QAAQ,CAAC,IAAD,CAH1B,yCAGnBa,cAHmB,eAGHC,iBAHG,wBAIQ,EAJR,8BAInBC,SAJmB,UAIRC,YAJQ,yBAKchB,QAAQ,CAAC,EAAD,CALtB,yCAKnBiB,YALmB,eAKLC,eALK,8BAMIlB,QAAQ,CAAC,EAAD,CANZ,yCAMnBmB,OANmB,eAMVC,UANU,eAS1BnB,SAAS,CAAC,UAAM,CACZ,GAAIU,QAAQ,CAAGH,KAAK,CAACa,SAAN,CAAgBC,SAAhB,CAA0BC,MAAzC,CAAiD,CAC7CL,eAAe,CAACV,KAAK,CAACa,SAAN,CAAgBC,SAAhB,CAA0BX,QAA1B,EAAoCa,QAArC,CAAf,CACAR,YAAY,CAACR,KAAK,CAACa,SAAN,CAAgBC,SAAhB,CAA0BX,QAA1B,EAAoCI,SAArC,CAAZ,CACA,GAAMU,CAAAA,YAAY,CAAG,CAACjB,KAAK,CAACa,SAAN,CAAgBC,SAAhB,CAA0BX,QAA1B,EAAoCe,SAArC,CACjBlB,KAAK,CAACa,SAAN,CAAgBC,SAAhB,CAA0BX,QAA1B,EAAoCgB,SADnB,CAEjBnB,KAAK,CAACa,SAAN,CAAgBC,SAAhB,CAA0BX,QAA1B,EAAoCiB,WAFnB,CAGjBpB,KAAK,CAACa,SAAN,CAAgBC,SAAhB,CAA0BX,QAA1B,EAAoCkB,UAHnB,CAArB,CAIAT,UAAU,CAACK,YAAD,CAAV,CACAX,iBAAiB,CAACH,QAAQ,CAAG,CAAZ,CAAjB,CACH,CACD,GAAIA,QAAQ,GAAKH,KAAK,CAACa,SAAN,CAAgBC,SAAhB,CAA0BC,MAA3C,CAAmD,CAC/Cf,KAAK,CAACsB,WAAN,GACH,CACJ,CAdQ,CAcN,CAACnB,QAAD,CAdM,CAAT,CAkBA,GAAMoB,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAM,CAC9BnB,WAAW,CAACD,QAAQ,CAAG,CAAZ,CAAX,CACH,CAFD,CAIA,GAAMqB,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,QAAD,CAAWC,KAAX,CAAqB,CACrCzB,eAAe,CAAC,CACZ0B,SAAS,CAAG,CAACC,EAAE,CAAG/B,OAAO,CAACgC,GAAR,CAAY,SAAZ,CAAN,CACZ1B,QAAQ,CAAGE,cADC,CAEZoB,QAAQ,CAAGA,QAFC,CAGZK,MAAM,CAAGJ,KAHG,CADA,CAAD,CAAf,CAMH,CAPD,CAaA,GAAMK,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,UAAD,CAAaC,KAAb,CAAuB,CACvC,GAAI9B,QAAQ,CAAGH,KAAK,CAACa,SAAN,CAAgBC,SAAhB,CAA0BC,MAAzC,CAAiD,CAC7C,GAAIkB,KAAK,GAAK,IAAd,CAAoB,CAChB,GAAID,UAAU,GAAKhC,KAAK,CAACa,SAAN,CAAgBC,SAAhB,CAA0BX,QAA1B,EAAoC+B,aAAvD,CAAqE,CACjE,GAAIR,CAAAA,KAAK,CAAGS,IAAI,CAACC,KAAL,CAAWH,KAAK,CAAC,GAAjB,CAAZ,CACAT,WAAW,CAACQ,UAAD,CAAahC,KAAK,CAAC8B,MAAN,CAAeJ,KAA5B,CAAX,CACA1B,KAAK,CAACqC,SAAN,CAAgBrC,KAAK,CAAC8B,MAAN,CAAeJ,KAA/B,EACAY,UAAU,CAAC,iBAAMf,CAAAA,mBAAmB,EAAzB,EAAD,CAA8B,GAA9B,CAAV,CACH,CALD,IAMK,CACDC,WAAW,CAACQ,UAAD,CAAahC,KAAK,CAAC8B,MAAnB,CAAX,CACAQ,UAAU,CAAC,iBAAMf,CAAAA,mBAAmB,EAAzB,EAAD,CAA8B,GAA9B,CAAV,CACH,CACJ,CAXD,IAYK,CACDC,WAAW,CAACQ,UAAD,CAAahC,KAAK,CAAC8B,MAAnB,CAAX,CACAQ,UAAU,CAAC,iBAAMf,CAAAA,mBAAmB,EAAzB,EAAD,CAA8B,GAA9B,CAAV,CACH,CACJ,CACJ,CAnBD,CAsBA,mBACI,2BAAK,SAAS,CAAE,YAAhB,eACI,oBAAC,YAAD,EAAc,YAAY,CAAEd,YAA5B,CACc,SAAS,CAAET,KAAK,CAACa,SAD/B,CAEc,cAAc,CAAER,cAF9B,CAGc,SAAS,CAAEE,SAHzB,CAIc,OAAO,CAAEI,OAJvB,CAKc,QAAQ,CAAER,QALxB,CAMc,WAAW,CAAE4B,WAN3B,CAOc,cAAc,CAAE/B,KAAK,CAACa,SAAN,CAAgBC,SAAhB,CAA0BC,MAPxD,EADJ,CADJ,CAYH,CA9ED,CAgFA,cAAehB,CAAAA,UAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport GameRenderer from \"./gameRenderer\";\nimport {ADD_RESPONSE} from \"../../queries\";\nimport {useMutation} from \"@apollo/react-hooks\";\nimport Cookies from 'js-cookie';\nimport './playQuestion.css';\nimport QuestionCount from \"./questionCount\";\n\n//add response array and showResults func in parent\n\nconst GameScreen = (props) => {\n    const [triggerMutation, { data }] = useMutation(ADD_RESPONSE);\n    const [progress, setProgress] = useState(props.progress); //changed count to progress\n    const [questionNumber, setQuestionNumber] = useState(null);\n    const [haveImage, setHaveImage] = \"\";\n    const [questionText, setQuestionText] = useState('');\n    const [options, setOptions] = useState([]);\n\n\n    useEffect(() => {\n        if (progress < props.stateData.questions.length) {\n            setQuestionText(props.stateData.questions[progress].question);\n            setHaveImage(props.stateData.questions[progress].haveImage);\n            const optionsArray = [props.stateData.questions[progress].optionOne,\n                props.stateData.questions[progress].optionTwo,\n                props.stateData.questions[progress].optionThree,\n                props.stateData.questions[progress].optionFour];\n            setOptions(optionsArray);\n            setQuestionNumber(progress + 1);\n        }\n        if (progress === props.stateData.questions.length) {\n            props.showResults();\n        }\n    }, [progress]);\n\n\n\n    const triggerNextQuestion = () => {\n        setProgress(progress + 1);\n    };\n\n    const addResponse = (response, point) => {\n        triggerMutation({\n            variables : {ID : Cookies.get('user_id'),\n            progress : questionNumber,\n            response : response,\n            points : point}\n        });\n    };\n\n\n\n\n\n    const checkAnswer = (optionText, ratio) => {\n        if (progress < props.stateData.questions.length) {\n            if (ratio !== null) {\n                if (optionText === props.stateData.questions[progress].correctOption){\n                    let point = Math.round(ratio*100);\n                    addResponse(optionText, props.points + point);\n                    props.setPoints(props.points + point);\n                    setTimeout(() => triggerNextQuestion(), 500);\n                }\n                else {\n                    addResponse(optionText, props.points);\n                    setTimeout(() => triggerNextQuestion(), 500);\n                }\n            }\n            else {\n                addResponse(optionText, props.points);\n                setTimeout(() => triggerNextQuestion(), 500);\n            }\n        }\n    };\n\n\n    return (\n        <div className={'gameScreen'}>\n            <GameRenderer questionText={questionText}\n                          stateData={props.stateData}\n                          questionNumber={questionNumber}\n                          haveImage={haveImage}\n                          options={options}\n                          progress={progress}\n                          checkAnswer={checkAnswer}\n                          totalQuestions={props.stateData.questions.length} />\n        </div>\n    );\n};\n\nexport default GameScreen;"]},"metadata":{},"sourceType":"module"}