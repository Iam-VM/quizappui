{"ast":null,"code":"import _objectSpread from\"/home/vm/Desktop/quizApp/quizappui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/vm/Desktop/quizApp/quizappui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/home/vm/Desktop/quizApp/quizappui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n    query ($ID : String!)\\n    {\\n        user(id : $ID)\\n        {\\n            userName,\\n            firstName,\\n            lastName,\\n            picture,\\n            email,\\n            progress\\n        },\\n        questions\\n        {\\n            questionID,\\n            question,\\n            optionOne,\\n            optionTwo,\\n            optionThree,\\n            optionFour,\\n            correctOption\\n        }\\n    }\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React,{useState}from'react';import{Redirect}from'react-router-dom';import'./playStart.css';import{graphql}from'react-apollo';import{useQuery}from'@apollo/react-hooks';import gql from'graphql-tag';import'../homeComponents/home.css';import{connect}from'react-redux';import Cookies from'js-cookie';import{mapDispatchToProps,mapStateToProps}from\"../../utils/mapReduxToState\";var getQuery=gql(_templateObject());var ConnectedGameScreen=function ConnectedGameScreen(props){return/*#__PURE__*/React.createElement(\"div\",{className:'gameArea-question-render'},/*#__PURE__*/React.createElement(\"h2\",{className:'question-title'},\"Question: \"));};var GameScreen=connect(mapStateToProps)(ConnectedGameScreen);var ConnectedDynamicGameArea=function ConnectedDynamicGameArea(props){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),startClicked=_useState2[0],setStartClicked=_useState2[1];var ID=Cookies.get('user_id')||null;var _useQuery=useQuery(getQuery,{variables:{ID:ID}}),loading=_useQuery.loading,error=_useQuery.error,data=_useQuery.data;if(error){return/*#__PURE__*/React.createElement(\"p\",null,\"Error occured: \".concat(error));}if(loading){return/*#__PURE__*/React.createElement(\"p\",null,\"loading...\");}else{var receivedData=_objectSpread(_objectSpread({},data.user),data.questions);console.log(receivedData);}console.log(props.state);if(!startClicked){return/*#__PURE__*/React.createElement(\"div\",{className:'gameArea'},/*#__PURE__*/React.createElement(\"p\",{className:'start-text'},\"You are ready to go\"),/*#__PURE__*/React.createElement(\"div\",{className:'start-underLine'}),/*#__PURE__*/React.createElement(\"div\",{className:'button start-button',onClick:function onClick(){return setStartClicked(true);}},\"Start Game\"));}return/*#__PURE__*/React.createElement(GameScreen,{ID:ID});};var DynamicGameArea=connect(mapStateToProps,mapDispatchToProps)(ConnectedDynamicGameArea);export default DynamicGameArea;","map":{"version":3,"sources":["/home/vm/Desktop/quizApp/quizappui/src/components/playComponents/dynamicGameArea.js"],"names":["React","useState","Redirect","graphql","useQuery","gql","connect","Cookies","mapDispatchToProps","mapStateToProps","getQuery","ConnectedGameScreen","props","GameScreen","ConnectedDynamicGameArea","startClicked","setStartClicked","ID","get","variables","loading","error","data","receivedData","user","questions","console","log","state","DynamicGameArea"],"mappings":"whCAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,KAA8B,OAA9B,CACA,OAAQC,QAAR,KAAuB,kBAAvB,CACA,MAAO,iBAAP,CACA,OAAQC,OAAR,KAAsB,cAAtB,CACA,OAASC,QAAT,KAAyB,qBAAzB,CACA,MAAOC,CAAAA,GAAP,KAAgB,aAAhB,CACA,MAAO,4BAAP,CACA,OAAQC,OAAR,KAAsB,aAAtB,CACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CACA,OAASC,kBAAT,CAA6BC,eAA7B,KAAoD,6BAApD,CAGA,GAAMC,CAAAA,QAAQ,CAAGL,GAAH,mBAAd,CAwBA,GAAMM,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,KAAD,CAAW,CACnC,mBACI,2BAAK,SAAS,CAAE,0BAAhB,eACI,0BAAI,SAAS,CAAE,gBAAf,eADJ,CADJ,CAKH,CAND,CAQA,GAAMC,CAAAA,UAAU,CAAGP,OAAO,CAACG,eAAD,CAAP,CAAyBE,mBAAzB,CAAnB,CAEA,GAAMG,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAACF,KAAD,CAAW,eACAX,QAAQ,CAAC,KAAD,CADR,wCACjCc,YADiC,eACnBC,eADmB,eAExC,GAAMC,CAAAA,EAAE,CAAGV,OAAO,CAACW,GAAR,CAAY,SAAZ,GAA0B,IAArC,CAFwC,cAGTd,QAAQ,CAACM,QAAD,CAAW,CAC9CS,SAAS,CAAG,CAACF,EAAE,CAAFA,EAAD,CADkC,CAAX,CAHC,CAGjCG,OAHiC,WAGjCA,OAHiC,CAGxBC,KAHwB,WAGxBA,KAHwB,CAGjBC,IAHiB,WAGjBA,IAHiB,CAOxC,GAAID,KAAJ,CAAW,CACP,mBAAS,sDAAsBA,KAAtB,EAAT,CACH,CACD,GAAID,OAAJ,CAAa,CACT,mBAAS,0CAAT,CACH,CAFD,IAGK,CACD,GAAMG,CAAAA,YAAY,gCAAOD,IAAI,CAACE,IAAZ,EAAqBF,IAAI,CAACG,SAA1B,CAAlB,CACAC,OAAO,CAACC,GAAR,CAAYJ,YAAZ,EACH,CACDG,OAAO,CAACC,GAAR,CAAYf,KAAK,CAACgB,KAAlB,EACA,GAAI,CAACb,YAAL,CAAkB,CACd,mBACI,2BAAK,SAAS,CAAE,UAAhB,eACI,yBAAG,SAAS,CAAE,YAAd,wBADJ,cAEI,2BAAK,SAAS,CAAE,iBAAhB,EAFJ,cAGI,2BAAK,SAAS,CAAE,qBAAhB,CAAuC,OAAO,CAAE,yBAAMC,CAAAA,eAAe,CAAC,IAAD,CAArB,EAAhD,eAHJ,CADJ,CAOH,CACD,mBAAO,oBAAC,UAAD,EAAY,EAAE,CAAEC,EAAhB,EAAP,CACH,CA5BD,CA8BA,GAAMY,CAAAA,eAAe,CAAGvB,OAAO,CAACG,eAAD,CAAkBD,kBAAlB,CAAP,CAA6CM,wBAA7C,CAAxB,CACA,cAAee,CAAAA,eAAf","sourcesContent":["import React, {useState} from 'react';\nimport {Redirect} from 'react-router-dom';\nimport './playStart.css';\nimport {graphql} from 'react-apollo';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport '../homeComponents/home.css';\nimport {connect} from 'react-redux';\nimport Cookies from 'js-cookie';\nimport { mapDispatchToProps, mapStateToProps } from \"../../utils/mapReduxToState\";\n\n\nconst getQuery = gql`\n    query ($ID : String!)\n    {\n        user(id : $ID)\n        {\n            userName,\n            firstName,\n            lastName,\n            picture,\n            email,\n            progress\n        },\n        questions\n        {\n            questionID,\n            question,\n            optionOne,\n            optionTwo,\n            optionThree,\n            optionFour,\n            correctOption\n        }\n    }\n`;\nconst ConnectedGameScreen = (props) => {\n    return(\n        <div className={'gameArea-question-render'}>\n            <h2 className={'question-title'}>Question: </h2>\n        </div>\n    );\n};\n\nconst GameScreen = connect(mapStateToProps)(ConnectedGameScreen);\n\nconst ConnectedDynamicGameArea = (props) => {\n    const [startClicked, setStartClicked] = useState(false);\n    const ID = Cookies.get('user_id') || null;\n    const {loading, error, data} = useQuery(getQuery, {\n        variables : {ID}\n    });\n\n    if (error) {\n        return  (<p>{`Error occured: ${error}`}</p>);\n    }\n    if (loading) {\n        return  (<p>loading...</p>);\n    }\n    else {\n        const receivedData = {...data.user, ...data.questions}\n        console.log(receivedData);\n    }\n    console.log(props.state);\n    if (!startClicked){\n        return (\n            <div className={'gameArea'}>\n                <p className={'start-text'}>You are ready to go</p>\n                <div className={'start-underLine'}></div>\n                <div className={'button start-button'} onClick={() => setStartClicked(true)}>Start Game</div>\n            </div>\n        );\n    }\n    return <GameScreen ID={ID}/>;\n};\n\nconst DynamicGameArea = connect(mapStateToProps, mapDispatchToProps)(ConnectedDynamicGameArea);\nexport default DynamicGameArea;\n"]},"metadata":{},"sourceType":"module"}