{"ast":null,"code":"//reducer\nimport{combineReducers}from'redux';var initialUserState={firstName:'',lastName:'',userName:'',email:'',picture:''};var initialQuestionState=[];var ADD_USER='ADD_USER';var ADD_QUESTION='ADD_QUESTION';//reducer initial_states are immutable by principle.\n//As a consequence we use 'Object.assign' for returning a new object taking properties from multiple sources rather than modifying the immutable one.\nvar userStateReducer=function userStateReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialUserState;var action=arguments.length>1?arguments[1]:undefined;if(action.type===ADD_USER){return Object.assign({},state,action.payload);}};var questionStateReducer=function questionStateReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialQuestionState;var action=arguments.length>1?arguments[1]:undefined;if(action.type===ADD_QUESTION){return action.payload;}};export default combineReducers({userStateReducer:userStateReducer,questionStateReducer:questionStateReducer});","map":{"version":3,"sources":["/home/vm/Desktop/quizApp/quizappui/src/redux/reducer.js"],"names":["combineReducers","initialUserState","firstName","lastName","userName","email","picture","initialQuestionState","ADD_USER","ADD_QUESTION","userStateReducer","state","action","type","Object","assign","payload","questionStateReducer"],"mappings":"AAAA;AACA,OAAQA,eAAR,KAA8B,OAA9B,CAGA,GAAMC,CAAAA,gBAAgB,CAAG,CACrBC,SAAS,CAAG,EADS,CAErBC,QAAQ,CAAG,EAFU,CAGrBC,QAAQ,CAAG,EAHU,CAIrBC,KAAK,CAAG,EAJa,CAKrBC,OAAO,CAAG,EALW,CAAzB,CAQA,GAAMC,CAAAA,oBAAoB,CAAG,EAA7B,CAGA,GAAMC,CAAAA,QAAQ,CAAG,UAAjB,CACA,GAAMC,CAAAA,YAAY,CAAG,cAArB,CAEA;AACA;AAEA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,EAAsC,IAArCC,CAAAA,KAAqC,2DAA7BV,gBAA6B,IAAXW,CAAAA,MAAW,2CAC3D,GAAIA,MAAM,CAACC,IAAP,GAAgBL,QAApB,CAA+B,CAC3B,MAAQM,CAAAA,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkBJ,KAAlB,CAAyBC,MAAM,CAACI,OAAhC,CAAR,CACH,CACJ,CAJD,CAMA,GAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,EAA0C,IAAzCN,CAAAA,KAAyC,2DAAjCJ,oBAAiC,IAAXK,CAAAA,MAAW,2CACnE,GAAIA,MAAM,CAACC,IAAP,GAAgBJ,YAApB,CAAkC,CAC9B,MAAQG,CAAAA,MAAM,CAACI,OAAf,CACH,CACJ,CAJD,CAMA,cAAehB,CAAAA,eAAe,CAAC,CAACU,gBAAgB,CAAhBA,gBAAD,CAAmBO,oBAAoB,CAApBA,oBAAnB,CAAD,CAA9B","sourcesContent":["//reducer\nimport {combineReducers} from 'redux';\n\n\nconst initialUserState = {\n    firstName : '',\n    lastName : '',\n    userName : '',\n    email : '',\n    picture : ''\n};\n\nconst initialQuestionState = [];\n\n\nconst ADD_USER = 'ADD_USER';\nconst ADD_QUESTION = 'ADD_QUESTION';\n\n//reducer initial_states are immutable by principle.\n//As a consequence we use 'Object.assign' for returning a new object taking properties from multiple sources rather than modifying the immutable one.\n\nconst userStateReducer = (state = initialUserState, action) => {\n    if (action.type === ADD_USER)  {\n        return (Object.assign({}, state, action.payload));\n    }\n};\n\nconst questionStateReducer = (state = initialQuestionState, action) => {\n    if (action.type === ADD_QUESTION) {\n        return (action.payload);\n    }\n}\n\nexport default combineReducers({userStateReducer, questionStateReducer}) ;"]},"metadata":{},"sourceType":"module"}