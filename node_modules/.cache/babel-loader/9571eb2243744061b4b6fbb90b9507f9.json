{"ast":null,"code":"import _slicedToArray from\"/home/vm/Desktop/quizApp/quizappui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/home/vm/Desktop/quizApp/quizappui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject2(){var data=_taggedTemplateLiteral([\"\\n    query\\n    {\\n        questions\\n        {\\n            questionID,\\n            question,\\n            optionOne,\\n            optionTwo,\\n            optionThree,\\n            optionFour,\\n            correctOption\\n        }\\n    }\\n\"]);_templateObject2=function _templateObject2(){return data;};return data;}function _templateObject(){var data=_taggedTemplateLiteral([\"\\n    query ($ID : String!)\\n    {\\n        user(id : $ID)\\n        {\\n            userName,\\n            firstName,\\n            lastName,\\n            picture,\\n            email,\\n            progress\\n        }\\n    }\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React,{useState}from'react';import{Redirect}from'react-router-dom';import'./playStart.css';import{graphql}from'react-apollo';import{useQuery}from'@apollo/react-hooks';import gql from'graphql-tag';import'../homeComponents/home.css';import{connect}from'react-redux';import Cookies from'js-cookie';import{mapQuestionsDispatchToProps,mapUserDispatchToProps}from\"../../utils/mapReduxToState\";var getUserQuery=gql(_templateObject());var getQuestionQuery=gql(_templateObject2());var ConnectedGameScreen=function ConnectedGameScreen(props){var _useQuery=useQuery(getQuestionQuery),loading=_useQuery.loading,error=_useQuery.error,data=_useQuery.data;console.log(data);return/*#__PURE__*/React.createElement(\"div\",{className:'gameArea-question-render'},/*#__PURE__*/React.createElement(\"h2\",{className:'question-title'},\"Question: \"));};var GameScreen=connect(null,mapQuestionsDispatchToProps)(ConnectedGameScreen);var ConnectedDynamicGameArea=function ConnectedDynamicGameArea(props){var ID=Cookies.get('user_id')||null;if(ID){var _useQuery2=useQuery(getUserQuery,{variables:{ID:ID}}),loading=_useQuery2.loading,error=_useQuery2.error,data=_useQuery2.data;console.log(data);var _useState=useState(false),_useState2=_slicedToArray(_useState,2),startClicked=_useState2[0],setStartClicked=_useState2[1];if(!startClicked){return/*#__PURE__*/React.createElement(\"div\",{className:'gameArea'},/*#__PURE__*/React.createElement(\"p\",{className:'start-text'},\"You are ready to go\"),/*#__PURE__*/React.createElement(\"div\",{className:'start-underLine'}),/*#__PURE__*/React.createElement(\"div\",{className:'button start-button',onClick:function onClick(){return setStartClicked(true);}},\"Start Game\"));}return/*#__PURE__*/React.createElement(GameScreen,{ID:ID});}else{return/*#__PURE__*/React.createElement(Redirect,{to:'/'});}};var DynamicGameArea=connect(null,mapUserDispatchToProps)(ConnectedDynamicGameArea);export default DynamicGameArea;","map":{"version":3,"sources":["/home/vm/Desktop/quizApp/quizappui/src/components/playComponents/dynamicGameArea.js"],"names":["React","useState","Redirect","graphql","useQuery","gql","connect","Cookies","mapQuestionsDispatchToProps","mapUserDispatchToProps","getUserQuery","getQuestionQuery","ConnectedGameScreen","props","loading","error","data","console","log","GameScreen","ConnectedDynamicGameArea","ID","get","variables","startClicked","setStartClicked","DynamicGameArea"],"mappings":"oiCAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,KAA8B,OAA9B,CACA,OAAQC,QAAR,KAAuB,kBAAvB,CACA,MAAO,iBAAP,CACA,OAAQC,OAAR,KAAsB,cAAtB,CACA,OAASC,QAAT,KAAyB,qBAAzB,CACA,MAAOC,CAAAA,GAAP,KAAgB,aAAhB,CACA,MAAO,4BAAP,CACA,OAAQC,OAAR,KAAsB,aAAtB,CACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CACA,OAAQC,2BAAR,CAAqCC,sBAArC,KAAkE,6BAAlE,CAGA,GAAMC,CAAAA,YAAY,CAAGL,GAAH,mBAAlB,CAeA,GAAMM,CAAAA,gBAAgB,CAAGN,GAAH,oBAAtB,CAeA,GAAMO,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,KAAD,CAAW,eACJT,QAAQ,CAACO,gBAAD,CADJ,CAC5BG,OAD4B,WAC5BA,OAD4B,CACnBC,KADmB,WACnBA,KADmB,CACZC,IADY,WACZA,IADY,CAEnCC,OAAO,CAACC,GAAR,CAAYF,IAAZ,EACA,mBACI,2BAAK,SAAS,CAAE,0BAAhB,eACI,0BAAI,SAAS,CAAE,gBAAf,eADJ,CADJ,CAKH,CARD,CAUA,GAAMG,CAAAA,UAAU,CAAGb,OAAO,CAAC,IAAD,CAAOE,2BAAP,CAAP,CAA2CI,mBAA3C,CAAnB,CAEA,GAAMQ,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAACP,KAAD,CAAW,CACxC,GAAMQ,CAAAA,EAAE,CAAGd,OAAO,CAACe,GAAR,CAAY,SAAZ,GAA0B,IAArC,CACA,GAAID,EAAJ,CAAO,gBAC4BjB,QAAQ,CAACM,YAAD,CAAe,CAClDa,SAAS,CAAG,CAACF,EAAE,CAAFA,EAAD,CADsC,CAAf,CADpC,CACIP,OADJ,YACIA,OADJ,CACaC,KADb,YACaA,KADb,CACoBC,IADpB,YACoBA,IADpB,CAIHC,OAAO,CAACC,GAAR,CAAYF,IAAZ,EAJG,cAKqCf,QAAQ,CAAC,KAAD,CAL7C,wCAKIuB,YALJ,eAKkBC,eALlB,eAMH,GAAI,CAACD,YAAL,CAAkB,CACd,mBACI,2BAAK,SAAS,CAAE,UAAhB,eACI,yBAAG,SAAS,CAAE,YAAd,wBADJ,cAEI,2BAAK,SAAS,CAAE,iBAAhB,EAFJ,cAGI,2BAAK,SAAS,CAAE,qBAAhB,CAAuC,OAAO,CAAE,yBAAMC,CAAAA,eAAe,CAAC,IAAD,CAArB,EAAhD,eAHJ,CADJ,CAOH,CACD,mBAAO,oBAAC,UAAD,EAAY,EAAE,CAAEJ,EAAhB,EAAP,CACH,CAhBD,IAiBK,CACD,mBACI,oBAAC,QAAD,EAAU,EAAE,CAAE,GAAd,EADJ,CAGH,CAEJ,CAzBD,CA2BA,GAAMK,CAAAA,eAAe,CAAGpB,OAAO,CAAC,IAAD,CAAOG,sBAAP,CAAP,CAAsCW,wBAAtC,CAAxB,CACA,cAAeM,CAAAA,eAAf","sourcesContent":["import React, {useState} from 'react';\nimport {Redirect} from 'react-router-dom';\nimport './playStart.css';\nimport {graphql} from 'react-apollo';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport '../homeComponents/home.css';\nimport {connect} from 'react-redux';\nimport Cookies from 'js-cookie';\nimport {mapQuestionsDispatchToProps, mapUserDispatchToProps} from \"../../utils/mapReduxToState\";\n\n\nconst getUserQuery = gql`\n    query ($ID : String!)\n    {\n        user(id : $ID)\n        {\n            userName,\n            firstName,\n            lastName,\n            picture,\n            email,\n            progress\n        }\n    }\n`;\n\nconst getQuestionQuery = gql`\n    query\n    {\n        questions\n        {\n            questionID,\n            question,\n            optionOne,\n            optionTwo,\n            optionThree,\n            optionFour,\n            correctOption\n        }\n    }\n`;\nconst ConnectedGameScreen = (props) => {\n    const {loading, error, data} = useQuery(getQuestionQuery);\n    console.log(data);\n    return(\n        <div className={'gameArea-question-render'}>\n            <h2 className={'question-title'}>Question: </h2>\n        </div>\n    );\n};\n\nconst GameScreen = connect(null, mapQuestionsDispatchToProps)(ConnectedGameScreen);\n\nconst ConnectedDynamicGameArea = (props) => {\n    const ID = Cookies.get('user_id') || null;\n    if (ID){\n        const {loading, error, data} = useQuery(getUserQuery, {\n            variables : {ID}\n        });\n        console.log(data);\n        const [startClicked, setStartClicked] = useState(false);\n        if (!startClicked){\n            return (\n                <div className={'gameArea'}>\n                    <p className={'start-text'}>You are ready to go</p>\n                    <div className={'start-underLine'}></div>\n                    <div className={'button start-button'} onClick={() => setStartClicked(true)}>Start Game</div>\n                </div>\n            );\n        }\n        return <GameScreen ID={ID}/>;\n    }\n    else {\n        return (\n            <Redirect to={'/'} />\n        );\n    }\n\n};\n\nconst DynamicGameArea = connect(null, mapUserDispatchToProps)(ConnectedDynamicGameArea);\nexport default DynamicGameArea;"]},"metadata":{},"sourceType":"module"}