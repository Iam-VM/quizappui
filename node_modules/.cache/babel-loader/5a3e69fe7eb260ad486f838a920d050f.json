{"ast":null,"code":"var _jsxFileName = \"/home/vm/Desktop/quizApp/quizappui/src/components/playComponents/dynamicGameArea.js\";\nimport React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport './playStart.css';\nimport { graphql } from 'react-apollo';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport '../homeComponents/home.css';\nimport { connect } from 'react-redux';\nimport Cookies from 'js-cookie';\nimport { mapQuestionsDispatchToProps, mapUserDispatchToProps, mapUserStateToProps, mapQuestionsStateToProps } from \"../../utils/mapReduxToState\";\nconst getQuery = gql`\n    query\n    {\n        user(id : $ID)\n        {\n            userName,\n            firstName,\n            lastName,\n            picture,\n            email,\n            progress\n        },\n        questions\n        {\n            questionID,\n            question,\n            optionOne,\n            optionTwo,\n            optionThree,\n            optionFour,\n            correctOption\n        }\n    }\n`;\n\nconst ConnectedGameScreen = props => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: 'gameArea-question-render',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: 'question-title',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, \"Question: \"));\n};\n\nconst GameScreen = connect(mapQuestionsStateToProps)(ConnectedGameScreen);\n\nconst ConnectedDynamicGameArea = props => {\n  const [startClicked, setStartClicked] = useState(false);\n  const ID = Cookies.get('user_id') || null;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(getQuery, {\n    variables: {\n      ID\n    }\n  });\n\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }, `Error occured ${error}`);\n  }\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }\n    }, \"loading...\");\n  }\n\n  console.log(data);\n\n  if (!startClicked) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: 'gameArea',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: 'start-text',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }, \"You are ready to go\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: 'start-underLine',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: 'button start-button',\n      onClick: () => setStartClicked(true),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }\n    }, \"Start Game\"));\n  }\n\n  return /*#__PURE__*/React.createElement(GameScreen, {\n    ID: ID,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 12\n    }\n  });\n};\n\nconst DynamicGameArea = connect(mapUserStateToProps, mapUserDispatchToProps)(ConnectedDynamicGameArea);\nexport default DynamicGameArea;","map":{"version":3,"sources":["/home/vm/Desktop/quizApp/quizappui/src/components/playComponents/dynamicGameArea.js"],"names":["React","useState","Redirect","graphql","useQuery","gql","connect","Cookies","mapQuestionsDispatchToProps","mapUserDispatchToProps","mapUserStateToProps","mapQuestionsStateToProps","getQuery","ConnectedGameScreen","props","GameScreen","ConnectedDynamicGameArea","startClicked","setStartClicked","ID","get","loading","error","data","variables","console","log","DynamicGameArea"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,OAAO,iBAAP;AACA,SAAQC,OAAR,QAAsB,cAAtB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAO,4BAAP;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,2BAAR,EAAqCC,sBAArC,EAA6DC,mBAA7D,EAAkFC,wBAAlF,QAAiH,6BAAjH;AAGA,MAAMC,QAAQ,GAAGP,GAAI;;;;;;;;;;;;;;;;;;;;;;;CAArB;;AAwBA,MAAMQ,mBAAmB,GAAIC,KAAD,IAAW;AACnC,sBACI;AAAK,IAAA,SAAS,EAAE,0BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAI,IAAA,SAAS,EAAE,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,CADJ;AAKH,CAND;;AAQA,MAAMC,UAAU,GAAGT,OAAO,CAACK,wBAAD,CAAP,CAAkCE,mBAAlC,CAAnB;;AAEA,MAAMG,wBAAwB,GAAIF,KAAD,IAAW;AACxC,QAAM,CAACG,YAAD,EAAeC,eAAf,IAAkCjB,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAMkB,EAAE,GAAGZ,OAAO,CAACa,GAAR,CAAY,SAAZ,KAA0B,IAArC;AACA,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAAyBnB,QAAQ,CAACQ,QAAD,EAAW;AAC9CY,IAAAA,SAAS,EAAG;AAACL,MAAAA;AAAD;AADkC,GAAX,CAAvC;;AAGA,MAAIG,KAAJ,EAAW;AACP,wBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,iBAAgBA,KAAM,EAA3B,CAAR;AACH;;AACD,MAAID,OAAJ,EAAa;AACT,wBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAR;AACH;;AACDI,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;;AACA,MAAI,CAACN,YAAL,EAAkB;AACd,wBACI;AAAK,MAAA,SAAS,EAAE,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAG,MAAA,SAAS,EAAE,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADJ,eAEI;AAAK,MAAA,SAAS,EAAE,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAGI;AAAK,MAAA,SAAS,EAAE,qBAAhB;AAAuC,MAAA,OAAO,EAAE,MAAMC,eAAe,CAAC,IAAD,CAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ,CADJ;AAOH;;AACD,sBAAO,oBAAC,UAAD;AAAY,IAAA,EAAE,EAAEC,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACH,CAvBD;;AAyBA,MAAMQ,eAAe,GAAGrB,OAAO,CAACI,mBAAD,EAAsBD,sBAAtB,CAAP,CAAqDO,wBAArD,CAAxB;AACA,eAAeW,eAAf","sourcesContent":["import React, {useState} from 'react';\nimport {Redirect} from 'react-router-dom';\nimport './playStart.css';\nimport {graphql} from 'react-apollo';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport '../homeComponents/home.css';\nimport {connect} from 'react-redux';\nimport Cookies from 'js-cookie';\nimport {mapQuestionsDispatchToProps, mapUserDispatchToProps, mapUserStateToProps, mapQuestionsStateToProps} from \"../../utils/mapReduxToState\";\n\n\nconst getQuery = gql`\n    query\n    {\n        user(id : $ID)\n        {\n            userName,\n            firstName,\n            lastName,\n            picture,\n            email,\n            progress\n        },\n        questions\n        {\n            questionID,\n            question,\n            optionOne,\n            optionTwo,\n            optionThree,\n            optionFour,\n            correctOption\n        }\n    }\n`;\nconst ConnectedGameScreen = (props) => {\n    return(\n        <div className={'gameArea-question-render'}>\n            <h2 className={'question-title'}>Question: </h2>\n        </div>\n    );\n};\n\nconst GameScreen = connect(mapQuestionsStateToProps)(ConnectedGameScreen);\n\nconst ConnectedDynamicGameArea = (props) => {\n    const [startClicked, setStartClicked] = useState(false);\n    const ID = Cookies.get('user_id') || null;\n    const {loading, error, data} = useQuery(getQuery, {\n        variables : {ID}\n    });\n    if (error) {\n        return (<p>{`Error occured ${error}`}</p>);\n    }\n    if (loading) {\n        return (<p>loading...</p>);\n    }\n    console.log(data);\n    if (!startClicked){\n        return (\n            <div className={'gameArea'}>\n                <p className={'start-text'}>You are ready to go</p>\n                <div className={'start-underLine'}></div>\n                <div className={'button start-button'} onClick={() => setStartClicked(true)}>Start Game</div>\n            </div>\n        );\n    }\n    return <GameScreen ID={ID}/>;\n};\n\nconst DynamicGameArea = connect(mapUserStateToProps, mapUserDispatchToProps)(ConnectedDynamicGameArea);\nexport default DynamicGameArea;\n"]},"metadata":{},"sourceType":"module"}