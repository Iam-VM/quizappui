{"ast":null,"code":"import _slicedToArray from\"/home/vm/Desktop/quizApp/quizappui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import GameRenderer from\"./gameRenderer\";import{ADD_RESPONSE}from\"../../queries\";import{useMutation}from\"@apollo/react-hooks\";import Cookies from'js-cookie';import'./playQuestion.css';//add response array and showResults func in parent\nvar GameScreen=function GameScreen(props){var _useMutation=useMutation(ADD_RESPONSE),_useMutation2=_slicedToArray(_useMutation,2),triggerMutation=_useMutation2[0],data=_useMutation2[1].data;var _useState=useState(props.progress),_useState2=_slicedToArray(_useState,2),progress=_useState2[0],setProgress=_useState2[1];//changed count to progress\nvar _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),questionNumber=_useState4[0],setQuestionNumber=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),questionText=_useState6[0],setQuestionText=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),options=_useState8[0],setOptions=_useState8[1];useEffect(function(){if(progress<props.stateData.questions.length){setQuestionText(props.stateData.questions[progress].question);var optionsArray=[props.stateData.questions[progress].optionOne,props.stateData.questions[progress].optionTwo,props.stateData.questions[progress].optionThree,props.stateData.questions[progress].optionFour];setOptions(optionsArray);setQuestionNumber(progress+1);}},[progress]);var triggerNextQuestion=function triggerNextQuestion(){setProgress(progress+1);/*setQuestionNumber(questionNumber + 1);\n        setQuestionText(props.stateData.questions[progress].question);\n        const optionsArray = [props.stateData.questions[progress].optionOne,\n            props.stateData.questions[counter].optionTwo,\n            props.stateData.questions[counter].optionThree,\n            props.stateData.questions[counter].optionFour];\n        setOptions(optionsArray);*/};var addResponse=function addResponse(response){triggerMutation({variables:{ID:Cookies.get('user_id'),progress:questionNumber,response:response}});};var checkAnswer=function checkAnswer(optionText){addResponse(optionText);props.responses.push(optionText);if(progress<props.stateData.questions.length){setTimeout(function(){return triggerNextQuestion();},500);}else{setTimeout(function(){return props.showResults();},500);}};return/*#__PURE__*/React.createElement(\"div\",{className:'gameScreen'},/*#__PURE__*/React.createElement(GameRenderer,{questionText:questionText,stateData:props.stateData,questionNumber:questionNumber,options:options,checkAnswer:checkAnswer,totalQuestions:props.stateData.questions.length}));};export default GameScreen;","map":{"version":3,"sources":["/home/vm/Desktop/quizApp/quizappui/src/components/playComponents/gameScreen.js"],"names":["React","useState","useEffect","GameRenderer","ADD_RESPONSE","useMutation","Cookies","GameScreen","props","triggerMutation","data","progress","setProgress","questionNumber","setQuestionNumber","questionText","setQuestionText","options","setOptions","stateData","questions","length","question","optionsArray","optionOne","optionTwo","optionThree","optionFour","triggerNextQuestion","addResponse","response","variables","ID","get","checkAnswer","optionText","responses","push","setTimeout","showResults"],"mappings":"yJAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,CAAyBC,SAAzB,KAAyC,OAAzC,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CACA,OAAQC,YAAR,KAA2B,eAA3B,CACA,OAAQC,WAAR,KAA0B,qBAA1B,CACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CACA,MAAO,oBAAP,CAEA;AAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,CAAW,kBACUH,WAAW,CAACD,YAAD,CADrB,8CACnBK,eADmB,kBACAC,IADA,kBACAA,IADA,eAEMT,QAAQ,CAACO,KAAK,CAACG,QAAP,CAFd,wCAEnBA,QAFmB,eAETC,WAFS,eAEgC;AAFhC,eAGkBX,QAAQ,CAAC,IAAD,CAH1B,yCAGnBY,cAHmB,eAGHC,iBAHG,8BAIcb,QAAQ,CAAC,EAAD,CAJtB,yCAInBc,YAJmB,eAILC,eAJK,8BAKIf,QAAQ,CAAC,EAAD,CALZ,yCAKnBgB,OALmB,eAKVC,UALU,eAO1BhB,SAAS,CAAC,UAAM,CACZ,GAAIS,QAAQ,CAAGH,KAAK,CAACW,SAAN,CAAgBC,SAAhB,CAA0BC,MAAzC,CAAiD,CAC7CL,eAAe,CAACR,KAAK,CAACW,SAAN,CAAgBC,SAAhB,CAA0BT,QAA1B,EAAoCW,QAArC,CAAf,CACA,GAAMC,CAAAA,YAAY,CAAG,CAACf,KAAK,CAACW,SAAN,CAAgBC,SAAhB,CAA0BT,QAA1B,EAAoCa,SAArC,CACjBhB,KAAK,CAACW,SAAN,CAAgBC,SAAhB,CAA0BT,QAA1B,EAAoCc,SADnB,CAEjBjB,KAAK,CAACW,SAAN,CAAgBC,SAAhB,CAA0BT,QAA1B,EAAoCe,WAFnB,CAGjBlB,KAAK,CAACW,SAAN,CAAgBC,SAAhB,CAA0BT,QAA1B,EAAoCgB,UAHnB,CAArB,CAIAT,UAAU,CAACK,YAAD,CAAV,CACAT,iBAAiB,CAACH,QAAQ,CAAG,CAAZ,CAAjB,CACH,CACJ,CAVQ,CAUN,CAACA,QAAD,CAVM,CAAT,CAYA,GAAMiB,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAM,CAC9BhB,WAAW,CAACD,QAAQ,CAAG,CAAZ,CAAX,CACA;;;;;;mCAOH,CATD,CAWA,GAAMkB,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,QAAD,CAAc,CAC9BrB,eAAe,CAAC,CACZsB,SAAS,CAAG,CAACC,EAAE,CAAG1B,OAAO,CAAC2B,GAAR,CAAY,SAAZ,CAAN,CACZtB,QAAQ,CAAGE,cADC,CAEZiB,QAAQ,CAAGA,QAFC,CADA,CAAD,CAAf,CAKH,CAND,CAUA,GAAMI,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,UAAD,CAAgB,CAChCN,WAAW,CAACM,UAAD,CAAX,CACA3B,KAAK,CAAC4B,SAAN,CAAgBC,IAAhB,CAAqBF,UAArB,EACA,GAAIxB,QAAQ,CAAGH,KAAK,CAACW,SAAN,CAAgBC,SAAhB,CAA0BC,MAAzC,CAAgD,CAC5CiB,UAAU,CAAC,iBAAMV,CAAAA,mBAAmB,EAAzB,EAAD,CAA8B,GAA9B,CAAV,CACH,CAFD,IAGK,CACDU,UAAU,CAAC,iBAAM9B,CAAAA,KAAK,CAAC+B,WAAN,EAAN,EAAD,CAA4B,GAA5B,CAAV,CACH,CACJ,CATD,CAWA,mBACI,2BAAK,SAAS,CAAE,YAAhB,eACI,oBAAC,YAAD,EAAc,YAAY,CAAExB,YAA5B,CACc,SAAS,CAAEP,KAAK,CAACW,SAD/B,CAEc,cAAc,CAAEN,cAF9B,CAGc,OAAO,CAAEI,OAHvB,CAIc,WAAW,CAAEiB,WAJ3B,CAKc,cAAc,CAAE1B,KAAK,CAACW,SAAN,CAAgBC,SAAhB,CAA0BC,MALxD,EADJ,CADJ,CAUH,CA7DD,CA+DA,cAAed,CAAAA,UAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport GameRenderer from \"./gameRenderer\";\nimport {ADD_RESPONSE} from \"../../queries\";\nimport {useMutation} from \"@apollo/react-hooks\";\nimport Cookies from 'js-cookie';\nimport './playQuestion.css';\n\n//add response array and showResults func in parent\n\nconst GameScreen = (props) => {\n    const [triggerMutation, { data }] = useMutation(ADD_RESPONSE);\n    const [progress, setProgress] = useState(props.progress); //changed count to progress\n    const [questionNumber, setQuestionNumber] = useState(null);\n    const [questionText, setQuestionText] = useState('');\n    const [options, setOptions] = useState([]);\n\n    useEffect(() => {\n        if (progress < props.stateData.questions.length) {\n            setQuestionText(props.stateData.questions[progress].question);\n            const optionsArray = [props.stateData.questions[progress].optionOne,\n                props.stateData.questions[progress].optionTwo,\n                props.stateData.questions[progress].optionThree,\n                props.stateData.questions[progress].optionFour];\n            setOptions(optionsArray);\n            setQuestionNumber(progress + 1);\n        }\n    }, [progress]);\n\n    const triggerNextQuestion = () => {\n        setProgress(progress + 1);\n        /*setQuestionNumber(questionNumber + 1);\n        setQuestionText(props.stateData.questions[progress].question);\n        const optionsArray = [props.stateData.questions[progress].optionOne,\n            props.stateData.questions[counter].optionTwo,\n            props.stateData.questions[counter].optionThree,\n            props.stateData.questions[counter].optionFour];\n        setOptions(optionsArray);*/\n    };\n\n    const addResponse = (response) => {\n        triggerMutation({\n            variables : {ID : Cookies.get('user_id'),\n            progress : questionNumber,\n            response : response}\n        });\n    };\n\n\n\n    const checkAnswer = (optionText) => {\n        addResponse(optionText);\n        props.responses.push(optionText);\n        if (progress < props.stateData.questions.length){\n            setTimeout(() => triggerNextQuestion(), 500);\n        }\n        else {\n            setTimeout(() => props.showResults(), 500);\n        }\n    };\n\n    return (\n        <div className={'gameScreen'}>\n            <GameRenderer questionText={questionText}\n                          stateData={props.stateData}\n                          questionNumber={questionNumber}\n                          options={options}\n                          checkAnswer={checkAnswer}\n                          totalQuestions={props.stateData.questions.length} />\n        </div>\n    );\n};\n\nexport default GameScreen;"]},"metadata":{},"sourceType":"module"}