{"ast":null,"code":"import _slicedToArray from\"/home/vm/Desktop/quizApp/quizappui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import Question from\"./question\";import OptionInstant from\"./optionInstant\";import QuestionCount from\"./questionCount\";//props: questionText(string), options(list of options), stateData.\nvar GameRenderer=function GameRenderer(props){var _useState=useState(20),_useState2=_slicedToArray(_useState,2),timer=_useState2[0],setTimer=_useState2[1];useEffect(function(){if(timer===0){var e={currentTarget:{value:''}};props.checkAnswer(e);}setTimeout(function(){setTimer(timer-1);});},[]);var renderOptions=function renderOptions(option){return/*#__PURE__*/React.createElement(OptionInstant,{optionText:option,checkAnswer:props.checkAnswer});};return/*#__PURE__*/React.createElement(\"div\",{className:'gameScreen'},/*#__PURE__*/React.createElement(\"div\",{className:'questionHead'},/*#__PURE__*/React.createElement(\"span\",{className:'timer'},timer),/*#__PURE__*/React.createElement(\"span\",{className:'questionHeadText'},\"Question: \"),/*#__PURE__*/React.createElement(QuestionCount,{questionNumber:props.questionNumber,totalQuestions:props.stateData.questions.length})),/*#__PURE__*/React.createElement(Question,{question:props.questionText}),/*#__PURE__*/React.createElement(\"ul\",{className:'options'},props.options.map(function(option){renderOptions(option);})));};export default GameRenderer;","map":{"version":3,"sources":["/home/vm/Desktop/quizApp/quizappui/src/components/playComponents/gameRenderer.js"],"names":["React","useState","useEffect","Question","OptionInstant","QuestionCount","GameRenderer","props","timer","setTimer","e","currentTarget","value","checkAnswer","setTimeout","renderOptions","option","questionNumber","stateData","questions","length","questionText","options","map"],"mappings":"yJAAA,MAAOA,CAAAA,KAAP,EAAcC,QAAd,CAAwBC,SAAxB,KAAwC,OAAxC,CACA,MAAOC,CAAAA,QAAP,KAAqB,YAArB,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CAEA;AAGA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAW,eACFN,QAAQ,CAAC,EAAD,CADN,wCACrBO,KADqB,eACdC,QADc,eAE5BP,SAAS,CAAC,UAAM,CACZ,GAAIM,KAAK,GAAK,CAAd,CAAgB,CACZ,GAAME,CAAAA,CAAC,CAAG,CACNC,aAAa,CAAG,CACZC,KAAK,CAAG,EADI,CADV,CAAV,CAKAL,KAAK,CAACM,WAAN,CAAkBH,CAAlB,EACH,CACDI,UAAU,CAAC,UAAM,CAACL,QAAQ,CAACD,KAAK,CAAG,CAAT,CAAR,CAAoB,CAA5B,CAAV,CACH,CAVQ,CAUN,EAVM,CAAT,CAYA,GAAMO,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,MAAD,CAAY,CAC9B,mBACI,oBAAC,aAAD,EAAe,UAAU,CAAEA,MAA3B,CAAmC,WAAW,CAAET,KAAK,CAACM,WAAtD,EADJ,CAGH,CAJD,CAMA,mBACI,2BAAK,SAAS,CAAE,YAAhB,eACI,2BAAK,SAAS,CAAE,cAAhB,eACI,4BAAM,SAAS,CAAE,OAAjB,EAA2BL,KAA3B,CADJ,cAEI,4BAAM,SAAS,CAAE,kBAAjB,eAFJ,cAGI,oBAAC,aAAD,EAAe,cAAc,CAAED,KAAK,CAACU,cAArC,CAAqD,cAAc,CAAEV,KAAK,CAACW,SAAN,CAAgBC,SAAhB,CAA0BC,MAA/F,EAHJ,CADJ,cAMI,oBAAC,QAAD,EAAU,QAAQ,CAAEb,KAAK,CAACc,YAA1B,EANJ,cAOI,0BAAI,SAAS,CAAE,SAAf,EACKd,KAAK,CAACe,OAAN,CAAcC,GAAd,CAAkB,SAACP,MAAD,CAAY,CAACD,aAAa,CAACC,MAAD,CAAb,CAAsB,CAArD,CADL,CAPJ,CADJ,CAaH,CAjCD,CAmCA,cAAeV,CAAAA,YAAf","sourcesContent":["import React,{useState, useEffect} from 'react';\nimport Question from \"./question\";\nimport OptionInstant from \"./optionInstant\";\nimport QuestionCount from \"./questionCount\";\n\n//props: questionText(string), options(list of options), stateData.\n\n\nconst GameRenderer = (props) => {\n    const [timer, setTimer] = useState(20);\n    useEffect(() => {\n        if (timer === 0){\n            const e = {\n                currentTarget : {\n                    value : ''\n                }\n            }\n            props.checkAnswer(e);\n        }\n        setTimeout(() => {setTimer(timer - 1)})\n    }, []);\n\n    const renderOptions = (option) => {\n        return(\n            <OptionInstant optionText={option} checkAnswer={props.checkAnswer} />\n        );\n    };\n\n    return(\n        <div className={'gameScreen'}>\n            <div className={'questionHead'}>\n                <span className={'timer'}>{timer}</span>\n                <span className={'questionHeadText'}>Question: </span>\n                <QuestionCount questionNumber={props.questionNumber} totalQuestions={props.stateData.questions.length}/>\n            </div>\n            <Question question={props.questionText} />\n            <ul className={'options'}>\n                {props.options.map((option) => {renderOptions(option)})}\n            </ul>\n        </div>\n    );\n};\n\nexport default GameRenderer;"]},"metadata":{},"sourceType":"module"}