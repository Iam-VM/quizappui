{"ast":null,"code":"var _jsxFileName = \"/home/vm/Desktop/quizApp/quizappui/src/components/playComponents/dynamicGameArea.js\";\nimport React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport './playStart.css';\nimport { graphql } from 'react-apollo';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport '../homeComponents/home.css';\nimport { connect } from 'react-redux';\nimport Cookies from 'js-cookie';\nimport { mapQuestionsDispatchToProps, mapUserDispatchToProps } from \"../../utils/mapReduxToState\";\nconst getUserQuery = gql`\n    query ($ID : String!)\n    {\n        user(id : $ID)\n        {\n            userName,\n            firstName,\n            lastName,\n            picture,\n            email,\n            progress\n        }\n    }\n`;\nconst getQuestionQuery = gql`\n    query\n    {\n        questions\n        {\n            questionID,\n            question,\n            optionOne,\n            optionTwo,\n            optionThree,\n            optionFour,\n            correctOption\n        }\n    }\n`;\n\nconst ConnectedGameScreen = props => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(getQuestionQuery);\n  console.log(data);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: 'gameArea-question-render',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: 'question-title',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, \"Question: \"));\n};\n\nconst GameScreen = connect(null, mapQuestionsDispatchToProps)(ConnectedGameScreen);\n\nconst ConnectedDynamicGameArea = props => {\n  const [startClicked, setStartClicked] = useState(false);\n  const ID = Cookies.get('user_id') || null;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(getUserQuery, {\n    variables: {\n      ID\n    }\n  });\n\n  if (ID) {\n    console.log(data);\n\n    if (!startClicked) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: 'gameArea',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: 'start-text',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }\n      }, \"You are ready to go\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: 'start-underLine',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: 'button start-button',\n        onClick: () => setStartClicked(true),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }\n      }, \"Start Game\"));\n    }\n\n    return /*#__PURE__*/React.createElement(GameScreen, {\n      ID: ID,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 16\n      }\n    });\n  } else {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: '/',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    });\n  }\n};\n\nconst DynamicGameArea = connect(null, mapUserDispatchToProps)(ConnectedDynamicGameArea);\nexport default DynamicGameArea;","map":{"version":3,"sources":["/home/vm/Desktop/quizApp/quizappui/src/components/playComponents/dynamicGameArea.js"],"names":["React","useState","Redirect","graphql","useQuery","gql","connect","Cookies","mapQuestionsDispatchToProps","mapUserDispatchToProps","getUserQuery","getQuestionQuery","ConnectedGameScreen","props","loading","error","data","console","log","GameScreen","ConnectedDynamicGameArea","startClicked","setStartClicked","ID","get","variables","DynamicGameArea"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,OAAO,iBAAP;AACA,SAAQC,OAAR,QAAsB,cAAtB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAO,4BAAP;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,2BAAR,EAAqCC,sBAArC,QAAkE,6BAAlE;AAGA,MAAMC,YAAY,GAAGL,GAAI;;;;;;;;;;;;;CAAzB;AAeA,MAAMM,gBAAgB,GAAGN,GAAI;;;;;;;;;;;;;;CAA7B;;AAeA,MAAMO,mBAAmB,GAAIC,KAAD,IAAW;AACnC,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAAyBZ,QAAQ,CAACO,gBAAD,CAAvC;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,sBACI;AAAK,IAAA,SAAS,EAAE,0BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAI,IAAA,SAAS,EAAE,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,CADJ;AAKH,CARD;;AAUA,MAAMG,UAAU,GAAGb,OAAO,CAAC,IAAD,EAAOE,2BAAP,CAAP,CAA2CI,mBAA3C,CAAnB;;AAEA,MAAMQ,wBAAwB,GAAIP,KAAD,IAAW;AACxC,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCrB,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAMsB,EAAE,GAAGhB,OAAO,CAACiB,GAAR,CAAY,SAAZ,KAA0B,IAArC;AACA,QAAM;AAACV,IAAAA,OAAD;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAAyBZ,QAAQ,CAACM,YAAD,EAAe;AAClDe,IAAAA,SAAS,EAAG;AAACF,MAAAA;AAAD;AADsC,GAAf,CAAvC;;AAGA,MAAIA,EAAJ,EAAO;AACHN,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AACA,QAAI,CAACK,YAAL,EAAkB;AACd,0BACI;AAAK,QAAA,SAAS,EAAE,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAG,QAAA,SAAS,EAAE,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADJ,eAEI;AAAK,QAAA,SAAS,EAAE,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,eAGI;AAAK,QAAA,SAAS,EAAE,qBAAhB;AAAuC,QAAA,OAAO,EAAE,MAAMC,eAAe,CAAC,IAAD,CAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHJ,CADJ;AAOH;;AACD,wBAAO,oBAAC,UAAD;AAAY,MAAA,EAAE,EAAEC,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH,GAZD,MAaK;AACD,wBACI,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAE,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH;AAEJ,CAzBD;;AA2BA,MAAMG,eAAe,GAAGpB,OAAO,CAAC,IAAD,EAAOG,sBAAP,CAAP,CAAsCW,wBAAtC,CAAxB;AACA,eAAeM,eAAf","sourcesContent":["import React, {useState} from 'react';\nimport {Redirect} from 'react-router-dom';\nimport './playStart.css';\nimport {graphql} from 'react-apollo';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport '../homeComponents/home.css';\nimport {connect} from 'react-redux';\nimport Cookies from 'js-cookie';\nimport {mapQuestionsDispatchToProps, mapUserDispatchToProps} from \"../../utils/mapReduxToState\";\n\n\nconst getUserQuery = gql`\n    query ($ID : String!)\n    {\n        user(id : $ID)\n        {\n            userName,\n            firstName,\n            lastName,\n            picture,\n            email,\n            progress\n        }\n    }\n`;\n\nconst getQuestionQuery = gql`\n    query\n    {\n        questions\n        {\n            questionID,\n            question,\n            optionOne,\n            optionTwo,\n            optionThree,\n            optionFour,\n            correctOption\n        }\n    }\n`;\nconst ConnectedGameScreen = (props) => {\n    const {loading, error, data} = useQuery(getQuestionQuery);\n    console.log(data);\n    return(\n        <div className={'gameArea-question-render'}>\n            <h2 className={'question-title'}>Question: </h2>\n        </div>\n    );\n};\n\nconst GameScreen = connect(null, mapQuestionsDispatchToProps)(ConnectedGameScreen);\n\nconst ConnectedDynamicGameArea = (props) => {\n    const [startClicked, setStartClicked] = useState(false);\n    const ID = Cookies.get('user_id') || null;\n    const {loading, error, data} = useQuery(getUserQuery, {\n        variables : {ID}\n    });\n    if (ID){\n        console.log(data);\n        if (!startClicked){\n            return (\n                <div className={'gameArea'}>\n                    <p className={'start-text'}>You are ready to go</p>\n                    <div className={'start-underLine'}></div>\n                    <div className={'button start-button'} onClick={() => setStartClicked(true)}>Start Game</div>\n                </div>\n            );\n        }\n        return <GameScreen ID={ID}/>;\n    }\n    else {\n        return (\n            <Redirect to={'/'} />\n        );\n    }\n\n};\n\nconst DynamicGameArea = connect(null, mapUserDispatchToProps)(ConnectedDynamicGameArea);\nexport default DynamicGameArea;"]},"metadata":{},"sourceType":"module"}